package book.course.molareza.ir.mp3player.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import book.course.molareza.ir.mp3player.db.FavoriteClip;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE_CLIP".
*/
public class FavoriteClipDao extends AbstractDao<FavoriteClip, Long> {

    public static final String TABLENAME = "FAVORITE_CLIP";

    /**
     * Properties of entity FavoriteClip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_item = new Property(1, String.class, "id_item", false, "ID_ITEM");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Album = new Property(3, String.class, "album", false, "ALBUM");
        public final static Property ThImage = new Property(4, String.class, "thImage", false, "TH_IMAGE");
        public final static Property BigImage = new Property(5, String.class, "bigImage", false, "BIG_IMAGE");
        public final static Property Clip = new Property(6, String.class, "clip", false, "CLIP");
    };


    public FavoriteClipDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteClipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE_CLIP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_ITEM\" TEXT," + // 1: id_item
                "\"NAME\" TEXT," + // 2: name
                "\"ALBUM\" TEXT," + // 3: album
                "\"TH_IMAGE\" TEXT," + // 4: thImage
                "\"BIG_IMAGE\" TEXT," + // 5: bigImage
                "\"CLIP\" TEXT);"); // 6: clip
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE_CLIP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FavoriteClip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String id_item = entity.getId_item();
        if (id_item != null) {
            stmt.bindString(2, id_item);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
 
        String thImage = entity.getThImage();
        if (thImage != null) {
            stmt.bindString(5, thImage);
        }
 
        String bigImage = entity.getBigImage();
        if (bigImage != null) {
            stmt.bindString(6, bigImage);
        }
 
        String clip = entity.getClip();
        if (clip != null) {
            stmt.bindString(7, clip);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FavoriteClip readEntity(Cursor cursor, int offset) {
        FavoriteClip entity = new FavoriteClip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_item
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // album
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bigImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // clip
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FavoriteClip entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_item(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBigImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClip(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FavoriteClip entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FavoriteClip entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
